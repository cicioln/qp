{"version":3,"sources":["Utils.js"],"names":["cc","Class","extends","Component","properties","addClickEvent","node","target","component","handler","console","log","eventHandler","EventHandler","clickEvents","getComponent","Button","push","addSlideEvent","slideEvents","Slider","addEscEvent","eventManager","addListener","event","EventListener","KEYBOARD","onKeyPressed","keyCode","onKeyReleased","macro","KEY","escape","vv","alert","show","game","end","setFitSreenMode","find","size","view","getFrameSize","w","width","h","height","cvs","Canvas","dw","designResolution","dh","fitHeight","fitWidth"],"mappings":";;;;;;AAAAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVQ,KAHP;;AAgBL;AACAC,mBAAc,uBAASC,IAAT,EAAcC,MAAd,EAAqBC,SAArB,EAA+BC,OAA/B,EAAuC;AACjDC,gBAAQC,GAAR,CAAYH,YAAY,GAAZ,GAAkBC,OAA9B;AACA,YAAIG,eAAe,IAAIZ,GAAGG,SAAH,CAAaU,YAAjB,EAAnB;AACAD,qBAAaL,MAAb,GAAsBA,MAAtB;AACAK,qBAAaJ,SAAb,GAAyBA,SAAzB;AACAI,qBAAaH,OAAb,GAAuBA,OAAvB;;AAEA,YAAIK,cAAcR,KAAKS,YAAL,CAAkBf,GAAGgB,MAArB,EAA6BF,WAA/C;AACAA,oBAAYG,IAAZ,CAAiBL,YAAjB;AACH,KA1BI;;AA4BLM,mBAAc,uBAASZ,IAAT,EAAcC,MAAd,EAAqBC,SAArB,EAA+BC,OAA/B,EAAuC;AACjD,YAAIG,eAAe,IAAIZ,GAAGG,SAAH,CAAaU,YAAjB,EAAnB;AACAD,qBAAaL,MAAb,GAAsBA,MAAtB;AACAK,qBAAaJ,SAAb,GAAyBA,SAAzB;AACAI,qBAAaH,OAAb,GAAuBA,OAAvB;;AAEA,YAAIU,cAAcb,KAAKS,YAAL,CAAkBf,GAAGoB,MAArB,EAA6BD,WAA/C;AACAA,oBAAYF,IAAZ,CAAiBL,YAAjB;AACH,KApCI;;AAsCLS,iBAAY,qBAASf,IAAT,EAAc;AACtBN,WAAGsB,YAAH,CAAgBC,WAAhB,CAA4B;AACxBC,mBAAOxB,GAAGyB,aAAH,CAAiBC,QADA;AAExBC,0BAAe,sBAASC,OAAT,EAAkBJ,KAAlB,EAAwB,CACtC,CAHuB;AAIxBK,2BAAe,uBAASD,OAAT,EAAkBJ,KAAlB,EAAwB;AACnC,oBAAGI,WAAW5B,GAAG8B,KAAH,CAASC,GAAT,CAAaC,MAA3B,EAAkC;AAC9BhC,uBAAGiC,EAAH,CAAMC,KAAN,CAAYC,IAAZ,CAAiB,IAAjB,EAAsB,WAAtB,EAAkC,YAAU;AACxCnC,2BAAGoC,IAAH,CAAQC,GAAR,GADwC,CACzB;AAClB,qBAFD,EAEE,IAFF;AAGH;AACJ;AAVuB,SAA5B,EAWG/B,IAXH;AAYH,KAnDI;;AAqDLgC,qBAAgB,2BAAU;AACtB,YAAIhC,OAAON,GAAGuC,IAAH,CAAQ,QAAR,CAAX;AACA,YAAIC,OAAOxC,GAAGyC,IAAH,CAAQC,YAAR,EAAX;AACA,YAAIC,IAAIH,KAAKI,KAAb;AACA,YAAIC,IAAIL,KAAKM,MAAb;;AAEA,YAAIC,MAAMzC,KAAKS,YAAL,CAAkBf,GAAGgD,MAArB,CAAV;AACA,YAAIC,KAAKF,IAAIG,gBAAJ,CAAqBN,KAA9B;AACA,YAAIO,KAAKJ,IAAIG,gBAAJ,CAAqBJ,MAA9B;AACA;AACA,YAAIH,IAAIE,CAAL,GAAYI,KAAKE,EAApB,EAAwB;AACpBJ,gBAAIK,SAAJ,GAAgB,IAAhB;AACAL,gBAAIM,QAAJ,GAAe,KAAf;AACH,SAHD,MAII;AACA;AACAN,gBAAIK,SAAJ,GAAgB,KAAhB;AACAL,gBAAIM,QAAJ,GAAe,IAAf;AACH;AACJ;;AAED;AACA;;AAEA;AA7EK,CAAT","file":"Utils.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n    },\r\n\r\n    // 代码层来创建点击事件配置(也可以在cocos编辑器中button组件中配置点击事件)\r\n    addClickEvent:function(node,target,component,handler){\r\n        console.log(component + \":\" + handler);\r\n        var eventHandler = new cc.Component.EventHandler();\r\n        eventHandler.target = target;\r\n        eventHandler.component = component;\r\n        eventHandler.handler = handler;\r\n\r\n        var clickEvents = node.getComponent(cc.Button).clickEvents;\r\n        clickEvents.push(eventHandler);\r\n    },\r\n    \r\n    addSlideEvent:function(node,target,component,handler){\r\n        var eventHandler = new cc.Component.EventHandler();\r\n        eventHandler.target = target;\r\n        eventHandler.component = component;\r\n        eventHandler.handler = handler;\r\n\r\n        var slideEvents = node.getComponent(cc.Slider).slideEvents;\r\n        slideEvents.push(eventHandler);\r\n    },\r\n\r\n    addEscEvent:function(node){\r\n        cc.eventManager.addListener({\r\n            event: cc.EventListener.KEYBOARD,\r\n            onKeyPressed:  function(keyCode, event){\r\n            },\r\n            onKeyReleased: function(keyCode, event){\r\n                if(keyCode == cc.macro.KEY.escape){\r\n                    cc.vv.alert.show('提示','确定要退出游戏吗？',function(){\r\n                        cc.game.end(); // cocos中的方法执行就会退出程序或页面\r\n                    },true);\r\n                }\r\n            }\r\n        }, node);\r\n    },\r\n\r\n    setFitSreenMode:function(){\r\n        var node = cc.find('Canvas');\r\n        var size = cc.view.getFrameSize();\r\n        var w = size.width;\r\n        var h = size.height;\r\n    \r\n        var cvs = node.getComponent(cc.Canvas);\r\n        var dw = cvs.designResolution.width;\r\n        var dh = cvs.designResolution.height;\r\n        //如果更宽 则让高显示满\r\n        if((w / h)  > (dw / dh)){\r\n            cvs.fitHeight = true;\r\n            cvs.fitWidth = false;\r\n        }\r\n        else{\r\n            //如果更高，则让宽显示满\r\n            cvs.fitHeight = false;\r\n            cvs.fitWidth = true;\r\n        }\r\n    }\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    // update: function (dt) {\r\n\r\n    // },\r\n});\r\n"]}